#
#      Diamond (Release 1.0)
#      A system for interactive brute-force search
#
#      Copyright (c) 2002-2005, Intel Corporation
#      All Rights Reserved
#
#  This software is distributed under the terms of the Eclipse Public
#  License, Version 1.0 which can be found in the file named LICENSE.
#  ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
#  RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
#


############################################################################
# The following define the main configuration state the can be used
# for installing and configuring the system.
############################################################################

 
# if you are running the adiskd daemon on the local machine
# set DATADIR to the path where the data should be stored (this is written 
# into a config file that can be changed later
DATADIR=

#
# Where the headers, libraries, and binaries should be placed during
# the build process.
#
BUILD_LIB_PATH = $(ROOTDIR)/target/lib
BUILD_INC_PATH = $(ROOTDIR)/target/include
BUILD_BIN_PATH = $(ROOTDIR)/target/bin

# The installation directories, changes these if you want to
# have different installation paths.
INSTALLBASE=/usr/local/diamond
INSTALLDIR_BIN=${INSTALLBASE}/bin
INSTALLDIR_LIB=${INSTALLBASE}/lib
INSTALLDIR_INCLUDE=${INSTALLBASE}/include
INSTALLDIR_ETC=${INSTALLBASE}/etc


############################################################################
# This is the end of the main configuration section.  Only change the
# next sections if you want to change the compile options or how
# components are built.
############################################################################



INCDIR += -I${BUILD_INC_PATH}
INCDIR += -I$(ROOTDIR)/common

LIBDIR += -L${BUILD_LIB_PATH}


# general flags
CFLAGS += -O2
CFLAGS += -ggdb
CFLAGS += -DDEBUG 
CFLAGS += -Wall

# un-comment if you want profiling
#CFLAGS += -pg 


# The tools we want to use to compile
FLEX = flex
AWK = gawk
CC = gcc
CPLUSPLUS = g++
INSTALL = install


#Just to go overboard and be sure
CFLAGS += -D_REENTRANT
CFLAGS += -D_THREAD_SAFE

MKDIR = mkdir

#
# Other misc objects to remove during a make clean operation.
# For now we remove profiling object (gmon.out) and any core
# files that have been generated.
#

CLEAN_OTHERS += gmon.out core.* *.core filters.gviz filters.daVinci

#
# Objects to remove during "distclean".  For now just the .depend
#
DIST_OBJS += .depend

%.o: %.S
	${CPP} $(filter -I% -D%, ${INCDIR} ${CFLAGS}) $< | \
		${AS} ${ALL_ASFLAGS} -o $@
%.o: %.s
	${CPP} -E $(filter -I% -D%, ${INCDIR} ${CFLAGS}) $< | \
		${AS} ${ALL_ASFLAGS} -o $@
	@${LD} -x -r $@
	@${MV} a.out $@

%.o: %.c
	${CC} ${INCDIR} ${CFLAGS} -c $< -o $@

%.o: %.cc
	${CPLUSPLUS} ${INCDIR} ${CFLAGS} -c $< -o $@

%.a: $(LIBOBJS)
	rm -f $@ 
	ar -csr $@  $^
	cp -f $@ ${BUILD_LIB_PATH}

# The common targets

.PHONY :  all depend clean installdirs install mail FORCE

#
#  Define a do-subdirs function to execute recursive targets such as "all"
#  and clean. It calls "make" on each of the directories listed in SUBDIRS
#
ifndef do-subdirs
define do-subdirs
	@for entry in ${SUBDIRS}; do \
		(if test -d $${entry}; then \
			${MAKE} -C $${entry} $@; \
		else \
			echo "*** Warning:  couldn't find subdir $${entry}"; \
		fi); \
	done
endef
endif



TARGETS += copyheader copybin 

#  Rebuild everything, which is the program "PROG" and its 
#	subdirectories "SUBDIRS" 
#

#   Note: the "+" in front of a commmand makes the command happen
#  	even when the user has specified "make -n" 

all: ${SRCS} ${HSRCS} ${SSRCS} ${OSRCS} ${CYSRCS} ${HYSRCS} ${CLSRCS} ${PROG} ${TARGETS} ${SUBDIRS}
	${do-subdirs}


#
# Make the dependencies for this directory and its children
#
depend: 
ifneq ($(strip ${SRCS}),)
	${CC} -E -M ${INCDIR} ${CFLAGS} ${SRCS} > .depend
endif
	${do-subdirs}	


#
# Clean up the objects and binary in this directory and its children
#
clean: 
ifneq ($(strip ${OBJS} ${PROG} ${CLEAN_OTHERS} $(TARGETS)),)
	${RM} ${OBJS} $(TARGETS) $(PROG) $(CLEAN_OTHERS)
endif
	${do-subdirs}


#
# Clean up the objects and binary in this directory and its children
#
distclean: 
ifneq ($(strip ${OBJS} ${PROG} $(CLEAN_OTHERS) $(TARGETS) $(DIST_OBJS)),)
	${RM} ${OBJS} $(TARGETS) ${PROG} $(CLEAN_OTHERS) $(DIST_OBJS)
endif
	${do-subdirs}

copyheader:
	@for entry in ${SHARED_HEADERS} ; do \
		cp -fuv $${entry} ${BUILD_INC_PATH}; \
	done

copybin:
	@for entry in ${SHARED_BIN} ; do \
		cp -fuv $${entry} ${BUILD_BIN_PATH}; \
	done


# Installs must get done as root, but we don't need to test here since 
# installdirs will do it.  Note that local Makefiles should also perform
# this check iff they define their own installdirs target.

install: installdirs
ifneq ($(strip ${INSTALL_OTHERS}),)	
	${INSTALL} ${INSTALL_OTHERS} ${INSTALLDIR}
endif
ifneq ($(strip ${INSTALL_HEADERS}),)	
	@for entry in ${INSTALL_HEADERS} ; do \
		${INSTALL} $${entry} ${INSTALLDIR_INCLUDE} ; \
	done
endif
ifneq ($(strip ${INSTALL_LIBS}),)	
	@for entry in ${INSTALL_LIBS} ; do \
		${INSTALL} $${entry} ${INSTALLDIR_LIB} ; \
	done
endif
ifneq ($(strip ${INSTALL_BIN}),)	
	@for entry in ${INSTALL_BIN} ; do \
		${INSTALL} $${entry} ${INSTALLDIR_BIN} ; \
	done
endif
ifneq ($(strip ${INSTALL_ETC}),)	
	@for entry in ${INSTALL_ETC} ; do \
		${INSTALL} $${entry} ${INSTALLDIR_ETC} ; \
	done
endif





# Make copies as needed.
ifdef COPIES
	@for copyit in ${COPIES}; do \
		echo Creating copy of ${PROG} ; \
		cd ${COPYDIR} ; \
		${CP} ${INSTALLDIR_BIN}/${PROG} $${copyit} ; \
	done
endif

	${do-subdirs}



#  Create the directories to install into

ALL_INSTALLDIRS= ${INSTALLBASE} ${INSTALLDIR_BIN} ${INSTALLDIR_LIB} ${INSTALLDIR_INCLUDE} ${INSTALLDIR_ETC}
installdirs:
	${TESTROOT}
	@for entry in ${ALL_INSTALLDIRS} ; do \
		(if ! test -d $${entry}; then \
			echo Creating directory $${entry} ; \
			${MKDIR} $${entry} ; \
		fi); \
	done
	${do-subdirs}



#
# Inlude the dependancies that were included earlier.
-include .depend

FORCE:

