/*
 *  The OpenDiamond Platform for Interactive Search
 *  Version 5
 *
 *  Copyright (c) 2007-2009 Carnegie Mellon University
 *  All rights reserved.
 *
 *  This software is distributed under the terms of the Eclipse Public
 *  License, Version 1.0 which can be found in the file named LICENSE.
 *  ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS SOFTWARE CONSTITUTES
 *  RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT
 */

#if defined(RPC_HDR) || defined(RPC_XDR) || defined(MINIRPC)
%#include "rpc_preamble_xdr.h"
#else
#include "rpc_preamble.mx"
#endif

const SIG_SIZE = 16;
const MAX_FILTER_NAME = 128;
const MAX_FILTERS = 64;

typedef opaque		sig_val_x<SIG_SIZE>;

struct start_x {
    unsigned int search_id;
};

struct spec_file_x {
    sig_val_x	sig;
    opaque	data<>;
};

struct blob_x {
    string	filter_name<MAX_FILTER_NAME>;
    opaque	blob_data<>;
};

struct blob_sig_x {
    string	filter_name<MAX_FILTER_NAME>;
    sig_val_x	sig;
};


struct filter_stats_x {
    string	fs_name<MAX_FILTER_NAME>;
    int		fs_objs_processed;
    int		fs_objs_dropped;
    int		fs_objs_cache_dropped;
    int		fs_objs_cache_passed;
    int		fs_objs_compute;
    int		fs_hits_inter_session;
    int		fs_hits_inter_query;
    int		fs_hits_intra_query;
    hyper	fs_avg_exec_time;
};

struct dev_stats_x {
    int		ds_objs_total;
    int		ds_objs_processed;
    int		ds_objs_dropped;
    int		ds_objs_nproc;
    int		ds_system_load;
    hyper	ds_avg_obj_time;
    filter_stats_x ds_filter_stats<MAX_FILTERS>;
};

struct obj_x {
    sig_val_x	obj_sig;
    opaque	obj_data<>;
};

struct diamond_session_var_x {
    string	name<>;
    double	value;
};

struct diamond_session_vars_x {
    diamond_session_var_x vars<>;
};

struct attr_name_list_x {
    attr_name_x	attrs<>;
};

struct reexecute_x {
    string object_id<>;
    attr_name_x attrs<>;
};

struct attribute_list_x {
    attribute_x	attrs<>;
};

struct scope_x {
    string cookie<>;
};

serverprocs {
    /**** Client calls ****/
    device_start(start_x, void) = 1;
    device_set_spec(spec_file_x, void) = 6;

    device_set_blob(blob_x, void) = 11;

    /**** Device characteristics and statistics ****/
    request_stats(void, dev_stats_x) = 15;

    /**** Filter Caching ****/
    /* The filter caching calls are related respectively by:
     * client call(SET_OBJ) -> server call(GET_OBJ) -> client call(SEND_OBJ) */
    /* The GET_OBJ call is implied by the return code from SET_OBJ which
     * returns DIAMOND_FCACHEMISS when the object was not found */
    device_set_obj(sig_val_x, void) = 16;
    device_send_obj(obj_x, void) = 17;

    /**** Anomaly detection ****/
    session_variables_get(void, diamond_session_vars_x) = 18;
    session_variables_set(diamond_session_vars_x, void) = 19;

    /* Limit set of pushed attributes (thumbnail set) and filter reexecution */
    device_set_push_attrs(attr_name_list_x, void) = 20;
    device_reexecute_filters(reexecute_x, attribute_list_x) = 21;

    /* Blob caching */
    device_set_blob_by_signature(blob_sig_x, void) = 22;

    /* Specify search scope */
    device_set_scope(scope_x, void) = 24;
}
